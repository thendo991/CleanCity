============================= test session starts ==============================
platform darwin -- Python 3.13.3, pytest-7.1.2, pluggy-1.6.0
rootdir: /Users/bryanmwalwala/Desktop/CleanCity-main
plugins: allure-pytest-2.9.45, metadata-3.1.1, html-3.1.1
collected 28 items

tests/tests/test_admin.py FFFF                                           [ 14%]
tests/tests/test_awareness.py FFF                                        [ 25%]
tests/tests/test_dashboard.py FFF                                        [ 35%]
tests/tests/test_feedback.py FFFFF                                       [ 53%]
tests/tests/test_home.py FFFFFF                                          [ 75%]
tests/tests/test_login.py ..F...                                         [ 96%]
tests/tests/test_react_bootstrap.py F                                    [100%]

=================================== FAILURES ===================================
__________________________ TestAdmin.test_admin_login __________________________

self = <test_admin.TestAdmin object at 0x111626350>
admin_user = <selenium.webdriver.chrome.webdriver.WebDriver (session="0b9b34dbe20fc2cf8dd3365761ce3c41")>
admin_page = <pages.admin_page.AdminPage object at 0x11162eba0>

    def test_admin_login(self, admin_user, admin_page):
>       admin_page.navigate_to_admin()

tests/tests/test_admin.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/admin_page.py:14: in navigate_to_admin
    self.click((By.CSS_SELECTOR, "a[data-page='admin']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0b9b34dbe20fc2cf8dd3365761ce3c41")>
method = <function element_to_be_clickable.<locals>._predicate at 0x1116f76a0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010d55a2c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010d5518ea chromedriver + 6162666
E       2   chromedriver                        0x000000010cfd6de0 chromedriver + 417248
E       3   chromedriver                        0x000000010d028797 chromedriver + 751511
E       4   chromedriver                        0x000000010d0289b1 chromedriver + 752049
E       5   chromedriver                        0x000000010d0789b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010d04e9ed chromedriver + 907757
E       7   chromedriver                        0x000000010d075cdb chromedriver + 1068251
E       8   chromedriver                        0x000000010d04e793 chromedriver + 907155
E       9   chromedriver                        0x000000010d01ab25 chromedriver + 695077
E       10  chromedriver                        0x000000010d01b791 chromedriver + 698257
E       11  chromedriver                        0x000000010d516cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010d51abb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010d4f1004 chromedriver + 5767172
E       14  chromedriver                        0x000000010d51b5db chromedriver + 5940699
E       15  chromedriver                        0x000000010d4df704 chromedriver + 5695236
E       16  chromedriver                        0x000000010d53f0c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010d53f290 chromedriver + 6087312
E       18  chromedriver                        0x000000010d5514b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='admin']")
Current URL: http://localhost:3000/profile
_____________________ TestAdmin.test_update_request_status _____________________

self = <test_admin.TestAdmin object at 0x111626710>
admin_user = <selenium.webdriver.chrome.webdriver.WebDriver (session="0ed4ce76cc2b153f1c6e840c90874dfb")>
admin_page = <pages.admin_page.AdminPage object at 0x111739f90>

    def test_update_request_status(self, admin_user, admin_page):
>       admin_page.navigate_to_admin()

tests/tests/test_admin.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/admin_page.py:14: in navigate_to_admin
    self.click((By.CSS_SELECTOR, "a[data-page='admin']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="0ed4ce76cc2b153f1c6e840c90874dfb")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111764a40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x00000001065f92c8 chromedriver + 6197960
E       1   chromedriver                        0x00000001065f08ea chromedriver + 6162666
E       2   chromedriver                        0x0000000106075de0 chromedriver + 417248
E       3   chromedriver                        0x00000001060c7797 chromedriver + 751511
E       4   chromedriver                        0x00000001060c79b1 chromedriver + 752049
E       5   chromedriver                        0x00000001061179b4 chromedriver + 1079732
E       6   chromedriver                        0x00000001060ed9ed chromedriver + 907757
E       7   chromedriver                        0x0000000106114cdb chromedriver + 1068251
E       8   chromedriver                        0x00000001060ed793 chromedriver + 907155
E       9   chromedriver                        0x00000001060b9b25 chromedriver + 695077
E       10  chromedriver                        0x00000001060ba791 chromedriver + 698257
E       11  chromedriver                        0x00000001065b5cc0 chromedriver + 5921984
E       12  chromedriver                        0x00000001065b9bb1 chromedriver + 5938097
E       13  chromedriver                        0x0000000106590004 chromedriver + 5767172
E       14  chromedriver                        0x00000001065ba5db chromedriver + 5940699
E       15  chromedriver                        0x000000010657e704 chromedriver + 5695236
E       16  chromedriver                        0x00000001065de0c8 chromedriver + 6086856
E       17  chromedriver                        0x00000001065de290 chromedriver + 6087312
E       18  chromedriver                        0x00000001065f04b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='admin']")
Current URL: http://localhost:3000/profile
_________________________ TestAdmin.test_stats_update __________________________

self = <test_admin.TestAdmin object at 0x11156aea0>
admin_user = <selenium.webdriver.chrome.webdriver.WebDriver (session="b799e2a451c06ce1cbaf0527dbbc33b6")>
admin_page = <pages.admin_page.AdminPage object at 0x11173b4d0>

    def test_stats_update(self, admin_user, admin_page):
>       admin_page.navigate_to_admin()

tests/tests/test_admin.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/admin_page.py:14: in navigate_to_admin
    self.click((By.CSS_SELECTOR, "a[data-page='admin']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b799e2a451c06ce1cbaf0527dbbc33b6")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111764c20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010b5702c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010b5678ea chromedriver + 6162666
E       2   chromedriver                        0x000000010afecde0 chromedriver + 417248
E       3   chromedriver                        0x000000010b03e797 chromedriver + 751511
E       4   chromedriver                        0x000000010b03e9b1 chromedriver + 752049
E       5   chromedriver                        0x000000010b08e9b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010b0649ed chromedriver + 907757
E       7   chromedriver                        0x000000010b08bcdb chromedriver + 1068251
E       8   chromedriver                        0x000000010b064793 chromedriver + 907155
E       9   chromedriver                        0x000000010b030b25 chromedriver + 695077
E       10  chromedriver                        0x000000010b031791 chromedriver + 698257
E       11  chromedriver                        0x000000010b52ccc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010b530bb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010b507004 chromedriver + 5767172
E       14  chromedriver                        0x000000010b5315db chromedriver + 5940699
E       15  chromedriver                        0x000000010b4f5704 chromedriver + 5695236
E       16  chromedriver                        0x000000010b5550c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010b555290 chromedriver + 6087312
E       18  chromedriver                        0x000000010b5674b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='admin']")
Current URL: http://localhost:3000/profile
______________________ TestAdmin.test_update_button_state ______________________

self = <test_admin.TestAdmin object at 0x11156b100>
admin_user = <selenium.webdriver.chrome.webdriver.WebDriver (session="d15c65fbe2809ba34c2ce2678de242a8")>
admin_page = <pages.admin_page.AdminPage object at 0x11172e190>

    def test_update_button_state(self, admin_user, admin_page):
>       admin_page.navigate_to_admin()

tests/tests/test_admin.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/admin_page.py:14: in navigate_to_admin
    self.click((By.CSS_SELECTOR, "a[data-page='admin']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d15c65fbe2809ba34c2ce2678de242a8")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111764ea0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010a9932c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010a98a8ea chromedriver + 6162666
E       2   chromedriver                        0x000000010a40fde0 chromedriver + 417248
E       3   chromedriver                        0x000000010a461797 chromedriver + 751511
E       4   chromedriver                        0x000000010a4619b1 chromedriver + 752049
E       5   chromedriver                        0x000000010a4b19b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010a4879ed chromedriver + 907757
E       7   chromedriver                        0x000000010a4aecdb chromedriver + 1068251
E       8   chromedriver                        0x000000010a487793 chromedriver + 907155
E       9   chromedriver                        0x000000010a453b25 chromedriver + 695077
E       10  chromedriver                        0x000000010a454791 chromedriver + 698257
E       11  chromedriver                        0x000000010a94fcc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010a953bb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010a92a004 chromedriver + 5767172
E       14  chromedriver                        0x000000010a9545db chromedriver + 5940699
E       15  chromedriver                        0x000000010a918704 chromedriver + 5695236
E       16  chromedriver                        0x000000010a9780c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010a978290 chromedriver + 6087312
E       18  chromedriver                        0x000000010a98a4b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='admin']")
Current URL: http://localhost:3000/profile
_________________ TestAwarenessPage.test_accessibility_images __________________

self = <test_awareness.TestAwarenessPage object at 0x1116265d0>
logged_in_user = True
awareness_page = <pages.awareness_page.AwarenessPage object at 0x11162e660>

    def test_accessibility_images(self, logged_in_user, awareness_page):
        """Test that images have proper alt text for accessibility"""
>       awareness_page.navigate_to_awareness()

tests/tests/test_awareness.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/awareness_page.py:11: in navigate_to_awareness
    self.click((By.CSS_SELECTOR, "a[data-page='awareness']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="a1b8072ac3d087b06ca4eef34f553787")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111764fe0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010fabd2c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010fab48ea chromedriver + 6162666
E       2   chromedriver                        0x000000010f539de0 chromedriver + 417248
E       3   chromedriver                        0x000000010f58b797 chromedriver + 751511
E       4   chromedriver                        0x000000010f58b9b1 chromedriver + 752049
E       5   chromedriver                        0x000000010f5db9b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010f5b19ed chromedriver + 907757
E       7   chromedriver                        0x000000010f5d8cdb chromedriver + 1068251
E       8   chromedriver                        0x000000010f5b1793 chromedriver + 907155
E       9   chromedriver                        0x000000010f57db25 chromedriver + 695077
E       10  chromedriver                        0x000000010f57e791 chromedriver + 698257
E       11  chromedriver                        0x000000010fa79cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010fa7dbb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010fa54004 chromedriver + 5767172
E       14  chromedriver                        0x000000010fa7e5db chromedriver + 5940699
E       15  chromedriver                        0x000000010fa42704 chromedriver + 5695236
E       16  chromedriver                        0x000000010faa20c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010faa2290 chromedriver + 6087312
E       18  chromedriver                        0x000000010fab44b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='awareness']")
Current URL: http://localhost:3000/profile
______________ TestAwarenessPage.test_awareness_content_sections _______________

self = <test_awareness.TestAwarenessPage object at 0x1116260d0>
logged_in_user = True
awareness_page = <pages.awareness_page.AwarenessPage object at 0x11173b250>

    def test_awareness_content_sections(self, logged_in_user, awareness_page):
        """Test that all awareness sections are present"""
>       awareness_page.navigate_to_awareness()

tests/tests/test_awareness.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/awareness_page.py:11: in navigate_to_awareness
    self.click((By.CSS_SELECTOR, "a[data-page='awareness']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="aa5443e94ef3b8d69a1aaa4ec4899c75")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111765760>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010f9012c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010f8f88ea chromedriver + 6162666
E       2   chromedriver                        0x000000010f37dde0 chromedriver + 417248
E       3   chromedriver                        0x000000010f3cf797 chromedriver + 751511
E       4   chromedriver                        0x000000010f3cf9b1 chromedriver + 752049
E       5   chromedriver                        0x000000010f41f9b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010f3f59ed chromedriver + 907757
E       7   chromedriver                        0x000000010f41ccdb chromedriver + 1068251
E       8   chromedriver                        0x000000010f3f5793 chromedriver + 907155
E       9   chromedriver                        0x000000010f3c1b25 chromedriver + 695077
E       10  chromedriver                        0x000000010f3c2791 chromedriver + 698257
E       11  chromedriver                        0x000000010f8bdcc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010f8c1bb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010f898004 chromedriver + 5767172
E       14  chromedriver                        0x000000010f8c25db chromedriver + 5940699
E       15  chromedriver                        0x000000010f886704 chromedriver + 5695236
E       16  chromedriver                        0x000000010f8e60c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010f8e6290 chromedriver + 6087312
E       18  chromedriver                        0x000000010f8f84b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='awareness']")
Current URL: http://localhost:3000/profile
___________________ TestAwarenessPage.test_responsive_layout ___________________

self = <test_awareness.TestAwarenessPage object at 0x11156b230>
logged_in_user = True
awareness_page = <pages.awareness_page.AwarenessPage object at 0x11173bd90>

    def test_responsive_layout(self, logged_in_user, awareness_page):
        """Test that the awareness page layout is responsive"""
>       awareness_page.navigate_to_awareness()

tests/tests/test_awareness.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/awareness_page.py:11: in navigate_to_awareness
    self.click((By.CSS_SELECTOR, "a[data-page='awareness']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="40481f717cc92089468390fe20ded606")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111765d00>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010a39c2c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010a3938ea chromedriver + 6162666
E       2   chromedriver                        0x0000000109e18de0 chromedriver + 417248
E       3   chromedriver                        0x0000000109e6a797 chromedriver + 751511
E       4   chromedriver                        0x0000000109e6a9b1 chromedriver + 752049
E       5   chromedriver                        0x0000000109eba9b4 chromedriver + 1079732
E       6   chromedriver                        0x0000000109e909ed chromedriver + 907757
E       7   chromedriver                        0x0000000109eb7cdb chromedriver + 1068251
E       8   chromedriver                        0x0000000109e90793 chromedriver + 907155
E       9   chromedriver                        0x0000000109e5cb25 chromedriver + 695077
E       10  chromedriver                        0x0000000109e5d791 chromedriver + 698257
E       11  chromedriver                        0x000000010a358cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010a35cbb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010a333004 chromedriver + 5767172
E       14  chromedriver                        0x000000010a35d5db chromedriver + 5940699
E       15  chromedriver                        0x000000010a321704 chromedriver + 5695236
E       16  chromedriver                        0x000000010a3810c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010a381290 chromedriver + 6087312
E       18  chromedriver                        0x000000010a3934b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='awareness']")
Current URL: http://localhost:3000/profile
_____________________ TestDashboard.test_filter_by_status ______________________

self = <test_dashboard.TestDashboard object at 0x111626850>
logged_in_user = True
dashboard_page = <pages.dashboard_page.DashboardPage object at 0x11162e7b0>

    def test_filter_by_status(self, logged_in_user, dashboard_page):
>       dashboard_page.navigate_to_dashboard()

tests/tests/test_dashboard.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/dashboard_page.py:12: in navigate_to_dashboard
    self.click((By.CSS_SELECTOR, "a[data-page='dashboard']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="ba0d50a6b1755e0687bb960e5d465705")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111765ee0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010c5612c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010c5588ea chromedriver + 6162666
E       2   chromedriver                        0x000000010bfddde0 chromedriver + 417248
E       3   chromedriver                        0x000000010c02f797 chromedriver + 751511
E       4   chromedriver                        0x000000010c02f9b1 chromedriver + 752049
E       5   chromedriver                        0x000000010c07f9b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010c0559ed chromedriver + 907757
E       7   chromedriver                        0x000000010c07ccdb chromedriver + 1068251
E       8   chromedriver                        0x000000010c055793 chromedriver + 907155
E       9   chromedriver                        0x000000010c021b25 chromedriver + 695077
E       10  chromedriver                        0x000000010c022791 chromedriver + 698257
E       11  chromedriver                        0x000000010c51dcc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010c521bb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010c4f8004 chromedriver + 5767172
E       14  chromedriver                        0x000000010c5225db chromedriver + 5940699
E       15  chromedriver                        0x000000010c4e6704 chromedriver + 5695236
E       16  chromedriver                        0x000000010c5460c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010c546290 chromedriver + 6087312
E       18  chromedriver                        0x000000010c5584b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='dashboard']")
Current URL: http://localhost:3000/profile
____________________ TestDashboard.test_filter_by_location _____________________

self = <test_dashboard.TestDashboard object at 0x111626ad0>
logged_in_user = True
dashboard_page = <pages.dashboard_page.DashboardPage object at 0x1117f02d0>

    def test_filter_by_location(self, logged_in_user, dashboard_page):
>       dashboard_page.navigate_to_dashboard()

tests/tests/test_dashboard.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/dashboard_page.py:12: in navigate_to_dashboard
    self.click((By.CSS_SELECTOR, "a[data-page='dashboard']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="b8c3c0b0d09c60956f8d5450eaf1b6ae")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111766340>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010fd0b2c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010fd028ea chromedriver + 6162666
E       2   chromedriver                        0x000000010f787de0 chromedriver + 417248
E       3   chromedriver                        0x000000010f7d9797 chromedriver + 751511
E       4   chromedriver                        0x000000010f7d99b1 chromedriver + 752049
E       5   chromedriver                        0x000000010f8299b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010f7ff9ed chromedriver + 907757
E       7   chromedriver                        0x000000010f826cdb chromedriver + 1068251
E       8   chromedriver                        0x000000010f7ff793 chromedriver + 907155
E       9   chromedriver                        0x000000010f7cbb25 chromedriver + 695077
E       10  chromedriver                        0x000000010f7cc791 chromedriver + 698257
E       11  chromedriver                        0x000000010fcc7cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010fccbbb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010fca2004 chromedriver + 5767172
E       14  chromedriver                        0x000000010fccc5db chromedriver + 5940699
E       15  chromedriver                        0x000000010fc90704 chromedriver + 5695236
E       16  chromedriver                        0x000000010fcf00c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010fcf0290 chromedriver + 6087312
E       18  chromedriver                        0x000000010fd024b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='dashboard']")
Current URL: http://localhost:3000/profile
___________________ TestDashboard.test_filter_count_display ____________________

self = <test_dashboard.TestDashboard object at 0x11156afd0>
logged_in_user = True
dashboard_page = <pages.dashboard_page.DashboardPage object at 0x111627ed0>

    def test_filter_count_display(self, logged_in_user, dashboard_page):
>       dashboard_page.navigate_to_dashboard()

tests/tests/test_dashboard.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/dashboard_page.py:12: in navigate_to_dashboard
    self.click((By.CSS_SELECTOR, "a[data-page='dashboard']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="d7e0748437349f888940ccf0463b9007")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111766480>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010a18b2c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010a1828ea chromedriver + 6162666
E       2   chromedriver                        0x0000000109c07de0 chromedriver + 417248
E       3   chromedriver                        0x0000000109c59797 chromedriver + 751511
E       4   chromedriver                        0x0000000109c599b1 chromedriver + 752049
E       5   chromedriver                        0x0000000109ca99b4 chromedriver + 1079732
E       6   chromedriver                        0x0000000109c7f9ed chromedriver + 907757
E       7   chromedriver                        0x0000000109ca6cdb chromedriver + 1068251
E       8   chromedriver                        0x0000000109c7f793 chromedriver + 907155
E       9   chromedriver                        0x0000000109c4bb25 chromedriver + 695077
E       10  chromedriver                        0x0000000109c4c791 chromedriver + 698257
E       11  chromedriver                        0x000000010a147cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010a14bbb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010a122004 chromedriver + 5767172
E       14  chromedriver                        0x000000010a14c5db chromedriver + 5940699
E       15  chromedriver                        0x000000010a110704 chromedriver + 5695236
E       16  chromedriver                        0x000000010a1700c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010a170290 chromedriver + 6087312
E       18  chromedriver                        0x000000010a1824b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='dashboard']")
Current URL: http://localhost:3000/profile
___________________ TestFeedback.test_submit_valid_feedback ____________________

self = <test_feedback.TestFeedback object at 0x111626e90>, logged_in_user = True
feedback_page = <pages.feedback_page.FeedbackPage object at 0x11162e7b0>

    def test_submit_valid_feedback(self, logged_in_user, feedback_page):
>       feedback_page.navigate_to_feedback()

tests/tests/test_feedback.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/feedback_page.py:15: in navigate_to_feedback
    self.click((By.CSS_SELECTOR, "a[data-page='feedback']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="cf9226e93dae9b9ba1e811e692802b02")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111764f40>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x00000001032dc2c8 chromedriver + 6197960
E       1   chromedriver                        0x00000001032d38ea chromedriver + 6162666
E       2   chromedriver                        0x0000000102d58de0 chromedriver + 417248
E       3   chromedriver                        0x0000000102daa797 chromedriver + 751511
E       4   chromedriver                        0x0000000102daa9b1 chromedriver + 752049
E       5   chromedriver                        0x0000000102dfa9b4 chromedriver + 1079732
E       6   chromedriver                        0x0000000102dd09ed chromedriver + 907757
E       7   chromedriver                        0x0000000102df7cdb chromedriver + 1068251
E       8   chromedriver                        0x0000000102dd0793 chromedriver + 907155
E       9   chromedriver                        0x0000000102d9cb25 chromedriver + 695077
E       10  chromedriver                        0x0000000102d9d791 chromedriver + 698257
E       11  chromedriver                        0x0000000103298cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010329cbb1 chromedriver + 5938097
E       13  chromedriver                        0x0000000103273004 chromedriver + 5767172
E       14  chromedriver                        0x000000010329d5db chromedriver + 5940699
E       15  chromedriver                        0x0000000103261704 chromedriver + 5695236
E       16  chromedriver                        0x00000001032c10c8 chromedriver + 6086856
E       17  chromedriver                        0x00000001032c1290 chromedriver + 6087312
E       18  chromedriver                        0x00000001032d34b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='feedback']")
Current URL: http://localhost:3000/profile
_ TestFeedback.test_required_fields_validation[-Missed Pickup-expected_errors0] _

self = <test_feedback.TestFeedback object at 0x111626fd0>, logged_in_user = True
feedback_page = <pages.feedback_page.FeedbackPage object at 0x11173b250>
request_id = '', reason = 'Missed Pickup', expected_errors = ['Request ID']

    @pytest.mark.parametrize("request_id,reason,expected_errors", [
        ("", "Missed Pickup", ["Request ID"]),
        ("REQ001", "", ["Reason"]),
        ("", "", ["Request ID", "Reason"]),
    ])
    def test_required_fields_validation(self, logged_in_user, feedback_page, request_id, reason, expected_errors):
>       feedback_page.navigate_to_feedback()

tests/tests/test_feedback.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/feedback_page.py:15: in navigate_to_feedback
    self.click((By.CSS_SELECTOR, "a[data-page='feedback']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="235ed1b47be496b7c3cdfba90ce8a346")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111765800>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x00000001053c22c8 chromedriver + 6197960
E       1   chromedriver                        0x00000001053b98ea chromedriver + 6162666
E       2   chromedriver                        0x0000000104e3ede0 chromedriver + 417248
E       3   chromedriver                        0x0000000104e90797 chromedriver + 751511
E       4   chromedriver                        0x0000000104e909b1 chromedriver + 752049
E       5   chromedriver                        0x0000000104ee09b4 chromedriver + 1079732
E       6   chromedriver                        0x0000000104eb69ed chromedriver + 907757
E       7   chromedriver                        0x0000000104eddcdb chromedriver + 1068251
E       8   chromedriver                        0x0000000104eb6793 chromedriver + 907155
E       9   chromedriver                        0x0000000104e82b25 chromedriver + 695077
E       10  chromedriver                        0x0000000104e83791 chromedriver + 698257
E       11  chromedriver                        0x000000010537ecc0 chromedriver + 5921984
E       12  chromedriver                        0x0000000105382bb1 chromedriver + 5938097
E       13  chromedriver                        0x0000000105359004 chromedriver + 5767172
E       14  chromedriver                        0x00000001053835db chromedriver + 5940699
E       15  chromedriver                        0x0000000105347704 chromedriver + 5695236
E       16  chromedriver                        0x00000001053a70c8 chromedriver + 6086856
E       17  chromedriver                        0x00000001053a7290 chromedriver + 6087312
E       18  chromedriver                        0x00000001053b94b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='feedback']")
Current URL: http://localhost:3000/profile
____ TestFeedback.test_required_fields_validation[REQ001--expected_errors1] ____

self = <test_feedback.TestFeedback object at 0x11156b490>, logged_in_user = True
feedback_page = <pages.feedback_page.FeedbackPage object at 0x111739a90>
request_id = 'REQ001', reason = '', expected_errors = ['Reason']

    @pytest.mark.parametrize("request_id,reason,expected_errors", [
        ("", "Missed Pickup", ["Request ID"]),
        ("REQ001", "", ["Reason"]),
        ("", "", ["Request ID", "Reason"]),
    ])
    def test_required_fields_validation(self, logged_in_user, feedback_page, request_id, reason, expected_errors):
>       feedback_page.navigate_to_feedback()

tests/tests/test_feedback.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/feedback_page.py:15: in navigate_to_feedback
    self.click((By.CSS_SELECTOR, "a[data-page='feedback']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="34069da05f1333b9a869a798f430b170")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111766f20>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010a5662c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010a55d8ea chromedriver + 6162666
E       2   chromedriver                        0x0000000109fe2de0 chromedriver + 417248
E       3   chromedriver                        0x000000010a034797 chromedriver + 751511
E       4   chromedriver                        0x000000010a0349b1 chromedriver + 752049
E       5   chromedriver                        0x000000010a0849b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010a05a9ed chromedriver + 907757
E       7   chromedriver                        0x000000010a081cdb chromedriver + 1068251
E       8   chromedriver                        0x000000010a05a793 chromedriver + 907155
E       9   chromedriver                        0x000000010a026b25 chromedriver + 695077
E       10  chromedriver                        0x000000010a027791 chromedriver + 698257
E       11  chromedriver                        0x000000010a522cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010a526bb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010a4fd004 chromedriver + 5767172
E       14  chromedriver                        0x000000010a5275db chromedriver + 5940699
E       15  chromedriver                        0x000000010a4eb704 chromedriver + 5695236
E       16  chromedriver                        0x000000010a54b0c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010a54b290 chromedriver + 6087312
E       18  chromedriver                        0x000000010a55d4b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='feedback']")
Current URL: http://localhost:3000/profile
_______ TestFeedback.test_required_fields_validation[--expected_errors2] _______

self = <test_feedback.TestFeedback object at 0x11156b5c0>, logged_in_user = True
feedback_page = <pages.feedback_page.FeedbackPage object at 0x11156bbb0>
request_id = '', reason = '', expected_errors = ['Request ID', 'Reason']

    @pytest.mark.parametrize("request_id,reason,expected_errors", [
        ("", "Missed Pickup", ["Request ID"]),
        ("REQ001", "", ["Reason"]),
        ("", "", ["Request ID", "Reason"]),
    ])
    def test_required_fields_validation(self, logged_in_user, feedback_page, request_id, reason, expected_errors):
>       feedback_page.navigate_to_feedback()

tests/tests/test_feedback.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/feedback_page.py:15: in navigate_to_feedback
    self.click((By.CSS_SELECTOR, "a[data-page='feedback']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="912a9b68be3d3e47394b42bbfccb9317")>
method = <function element_to_be_clickable.<locals>._predicate at 0x111767560>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010b1f52c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010b1ec8ea chromedriver + 6162666
E       2   chromedriver                        0x000000010ac71de0 chromedriver + 417248
E       3   chromedriver                        0x000000010acc3797 chromedriver + 751511
E       4   chromedriver                        0x000000010acc39b1 chromedriver + 752049
E       5   chromedriver                        0x000000010ad139b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010ace99ed chromedriver + 907757
E       7   chromedriver                        0x000000010ad10cdb chromedriver + 1068251
E       8   chromedriver                        0x000000010ace9793 chromedriver + 907155
E       9   chromedriver                        0x000000010acb5b25 chromedriver + 695077
E       10  chromedriver                        0x000000010acb6791 chromedriver + 698257
E       11  chromedriver                        0x000000010b1b1cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010b1b5bb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010b18c004 chromedriver + 5767172
E       14  chromedriver                        0x000000010b1b65db chromedriver + 5940699
E       15  chromedriver                        0x000000010b17a704 chromedriver + 5695236
E       16  chromedriver                        0x000000010b1da0c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010b1da290 chromedriver + 6087312
E       18  chromedriver                        0x000000010b1ec4b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='feedback']")
Current URL: http://localhost:3000/profile
_____________________ TestFeedback.test_invalid_request_id _____________________

self = <test_feedback.TestFeedback object at 0x1115b3bf0>, logged_in_user = True
feedback_page = <pages.feedback_page.FeedbackPage object at 0x11172dcd0>

    def test_invalid_request_id(self, logged_in_user, feedback_page):
>       feedback_page.navigate_to_feedback()

tests/tests/test_feedback.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/pages/feedback_page.py:15: in navigate_to_feedback
    self.click((By.CSS_SELECTOR, "a[data-page='feedback']"))
tests/pages/base_page.py:32: in click
    element = self.wait.until(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.support.wait.WebDriverWait (session="36c584ecacebd12e2ca896793d7f49e6")>
method = <function element_to_be_clickable.<locals>._predicate at 0x1117668e0>
message = ''

    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = "") -> T:
        """Wait until the method returns a value that is not False.
    
        Calls the method provided with the driver as an argument until the
        return value does not evaluate to ``False``.
    
        Parameters:
        -----------
        method: callable(WebDriver)
            - A callable object that takes a WebDriver instance as an argument.
    
        message: str
            - Optional message for :exc:`TimeoutException`
    
        Return:
        -------
        object: T
            - The result of the last call to `method`
    
        Raises:
        -------
        TimeoutException
            - If 'method' does not return a truthy value within the WebDriverWait
            object's timeout
    
        Example:
        --------
        >>> from selenium.webdriver.common.by import By
        >>> from selenium.webdriver.support.ui import WebDriverWait
        >>> from selenium.webdriver.support import expected_conditions as EC
    
        # Wait until an element is visible on the page
        >>> wait = WebDriverWait(driver, 10)
        >>> element = wait.until(EC.visibility_of_element_located((By.ID, "exampleId")))
        >>> print(element.text)
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            if time.monotonic() > end_time:
                break
            time.sleep(self._poll)
>       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       0   chromedriver                        0x000000010a9e82c8 chromedriver + 6197960
E       1   chromedriver                        0x000000010a9df8ea chromedriver + 6162666
E       2   chromedriver                        0x000000010a464de0 chromedriver + 417248
E       3   chromedriver                        0x000000010a4b6797 chromedriver + 751511
E       4   chromedriver                        0x000000010a4b69b1 chromedriver + 752049
E       5   chromedriver                        0x000000010a5069b4 chromedriver + 1079732
E       6   chromedriver                        0x000000010a4dc9ed chromedriver + 907757
E       7   chromedriver                        0x000000010a503cdb chromedriver + 1068251
E       8   chromedriver                        0x000000010a4dc793 chromedriver + 907155
E       9   chromedriver                        0x000000010a4a8b25 chromedriver + 695077
E       10  chromedriver                        0x000000010a4a9791 chromedriver + 698257
E       11  chromedriver                        0x000000010a9a4cc0 chromedriver + 5921984
E       12  chromedriver                        0x000000010a9a8bb1 chromedriver + 5938097
E       13  chromedriver                        0x000000010a97f004 chromedriver + 5767172
E       14  chromedriver                        0x000000010a9a95db chromedriver + 5940699
E       15  chromedriver                        0x000000010a96d704 chromedriver + 5695236
E       16  chromedriver                        0x000000010a9cd0c8 chromedriver + 6086856
E       17  chromedriver                        0x000000010a9cd290 chromedriver + 6087312
E       18  chromedriver                        0x000000010a9df4b1 chromedriver + 6161585
E       19  libsystem_pthread.dylib             0x00007ff8168b21d3 _pthread_start + 125
E       20  libsystem_pthread.dylib             0x00007ff8168adbd3 thread_start + 15

venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException
----------------------------- Captured stdout call -----------------------------

Element not clickable: ('css selector', "a[data-page='feedback']")
Current URL: http://localhost:3000/profile
____________________ TestHomePage.test_submit_valid_request ____________________

self = <test_home.TestHomePage object at 0x111627250>, logged_in_user = True
home_page = <pages.home_page.HomePage object at 0x11162e660>

    def test_submit_valid_request(self, logged_in_user, home_page):
>       home_page.submit_pickup_request(
            name="Test User",
            location="Nairobi",
            waste_type="General",
            date="2023-12-31"
        )

tests/tests/test_home.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pages.home_page.HomePage object at 0x11162e660>, name = 'Test User'
location = 'Nairobi', waste_type = 'General', date = '2023-12-31'

    def submit_pickup_request(self, name, location, waste_type, date=None):
>       self.enter_text(self.FULL_NAME_INPUT, name)
E       AttributeError: 'HomePage' object has no attribute 'enter_text'

tests/pages/home_page.py:23: AttributeError
_ TestHomePage.test_required_fields_validation[-Nairobi-General-expected_errors0] _

self = <test_home.TestHomePage object at 0x111626490>, logged_in_user = True
home_page = <pages.home_page.HomePage object at 0x11173a850>, name = ''
location = 'Nairobi', waste_type = 'General', expected_errors = ['Name']

    @pytest.mark.parametrize("name,location,waste_type,expected_errors", [
        ("", "Nairobi", "General", ["Name"]),
        ("Test User", "", "General", ["Location"]),
        ("Test User", "Nairobi", "", ["Waste"]),
        ("", "", "", ["Name", "Location", "Waste"]),
    ])
    def test_required_fields_validation(self, logged_in_user, home_page, name, location, waste_type, expected_errors):
>       home_page.submit_pickup_request(name, location, waste_type)

tests/tests/test_home.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pages.home_page.HomePage object at 0x11173a850>, name = ''
location = 'Nairobi', waste_type = 'General', date = None

    def submit_pickup_request(self, name, location, waste_type, date=None):
>       self.enter_text(self.FULL_NAME_INPUT, name)
E       AttributeError: 'HomePage' object has no attribute 'enter_text'

tests/pages/home_page.py:23: AttributeError
_ TestHomePage.test_required_fields_validation[Test User--General-expected_errors1] _

self = <test_home.TestHomePage object at 0x11156ab10>, logged_in_user = True
home_page = <pages.home_page.HomePage object at 0x11173b890>, name = 'Test User'
location = '', waste_type = 'General', expected_errors = ['Location']

    @pytest.mark.parametrize("name,location,waste_type,expected_errors", [
        ("", "Nairobi", "General", ["Name"]),
        ("Test User", "", "General", ["Location"]),
        ("Test User", "Nairobi", "", ["Waste"]),
        ("", "", "", ["Name", "Location", "Waste"]),
    ])
    def test_required_fields_validation(self, logged_in_user, home_page, name, location, waste_type, expected_errors):
>       home_page.submit_pickup_request(name, location, waste_type)

tests/tests/test_home.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pages.home_page.HomePage object at 0x11173b890>, name = 'Test User'
location = '', waste_type = 'General', date = None

    def submit_pickup_request(self, name, location, waste_type, date=None):
>       self.enter_text(self.FULL_NAME_INPUT, name)
E       AttributeError: 'HomePage' object has no attribute 'enter_text'

tests/pages/home_page.py:23: AttributeError
_ TestHomePage.test_required_fields_validation[Test User-Nairobi--expected_errors2] _

self = <test_home.TestHomePage object at 0x11156b6f0>, logged_in_user = True
home_page = <pages.home_page.HomePage object at 0x11173b4d0>, name = 'Test User'
location = 'Nairobi', waste_type = '', expected_errors = ['Waste']

    @pytest.mark.parametrize("name,location,waste_type,expected_errors", [
        ("", "Nairobi", "General", ["Name"]),
        ("Test User", "", "General", ["Location"]),
        ("Test User", "Nairobi", "", ["Waste"]),
        ("", "", "", ["Name", "Location", "Waste"]),
    ])
    def test_required_fields_validation(self, logged_in_user, home_page, name, location, waste_type, expected_errors):
>       home_page.submit_pickup_request(name, location, waste_type)

tests/tests/test_home.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pages.home_page.HomePage object at 0x11173b4d0>, name = 'Test User'
location = 'Nairobi', waste_type = '', date = None

    def submit_pickup_request(self, name, location, waste_type, date=None):
>       self.enter_text(self.FULL_NAME_INPUT, name)
E       AttributeError: 'HomePage' object has no attribute 'enter_text'

tests/pages/home_page.py:23: AttributeError
______ TestHomePage.test_required_fields_validation[---expected_errors3] _______

self = <test_home.TestHomePage object at 0x1116d84d0>, logged_in_user = True
home_page = <pages.home_page.HomePage object at 0x11173a0d0>, name = ''
location = '', waste_type = '', expected_errors = ['Name', 'Location', 'Waste']

    @pytest.mark.parametrize("name,location,waste_type,expected_errors", [
        ("", "Nairobi", "General", ["Name"]),
        ("Test User", "", "General", ["Location"]),
        ("Test User", "Nairobi", "", ["Waste"]),
        ("", "", "", ["Name", "Location", "Waste"]),
    ])
    def test_required_fields_validation(self, logged_in_user, home_page, name, location, waste_type, expected_errors):
>       home_page.submit_pickup_request(name, location, waste_type)

tests/tests/test_home.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pages.home_page.HomePage object at 0x11173a0d0>, name = ''
location = '', waste_type = '', date = None

    def submit_pickup_request(self, name, location, waste_type, date=None):
>       self.enter_text(self.FULL_NAME_INPUT, name)
E       AttributeError: 'HomePage' object has no attribute 'enter_text'

tests/pages/home_page.py:23: AttributeError
___________________ TestHomePage.test_date_field_validation ____________________

self = <test_home.TestHomePage object at 0x1115a6be0>, logged_in_user = True
home_page = <pages.home_page.HomePage object at 0x111739e50>

    def test_date_field_validation(self, logged_in_user, home_page):
        # Intentional bug - date field doesn't show validation error
>       home_page.submit_pickup_request(
            name="Test User",
            location="Nairobi",
            waste_type="General",
            date="invalid-date"
        )

tests/tests/test_home.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pages.home_page.HomePage object at 0x111739e50>, name = 'Test User'
location = 'Nairobi', waste_type = 'General', date = 'invalid-date'

    def submit_pickup_request(self, name, location, waste_type, date=None):
>       self.enter_text(self.FULL_NAME_INPUT, name)
E       AttributeError: 'HomePage' object has no attribute 'enter_text'

tests/pages/home_page.py:23: AttributeError
_ TestLogin.test_login_with_credentials[invalid@email.com-wrongpass-False-True] _

self = <test_login.TestLogin object at 0x11156b950>
login_page = <pages.login_page.LoginPage object at 0x1117ea750>
email = 'invalid@email.com', password = 'wrongpass', expected_success = False
expect_error = True

    @pytest.mark.parametrize("email,password,expected_success,expect_error", [
        # Valid credentials
        ("user@cleancity.com", "password123", True, False),
        ("admin@cleancity.com", "admin123", True, False),
    
        # Invalid credentials (now expecting redirect with current behavior)
        ("invalid@email.com", "wrongpass", False, True),
    
        # Empty fields (now expecting no error with current behavior)
        ("", "password123", False, False),
        ("user@cleancity.com", "", False, False),
    ])
    def test_login_with_credentials(self, login_page, email, password, expected_success, expect_error):
        login_page.login(email, password)
    
        if expected_success:
            assert login_page.is_login_successful(), \
                f"Expected successful login but failed. URL: {login_page.driver.current_url}"
        else:
            if expect_error:
                error_msg = login_page.get_error_message()
>               assert error_msg, f"Expected error message but got none. URL: {login_page.driver.current_url}"
E               AssertionError: Expected error message but got none. URL: http://localhost:3000/profile
E               assert ''

tests/tests/test_login.py:28: AssertionError
______________________________ test_react_loaded _______________________________

browser = <selenium.webdriver.chrome.webdriver.WebDriver (session="98d395fc402b8502e1c90fccbc4591ae")>

    def test_react_loaded(browser):
        browser.get("http://localhost:3000")
>       assert browser.execute_script("return typeof React !== 'undefined'"), "React is not defined"
E       AssertionError: React is not defined
E       assert False
E        +  where False = <bound method WebDriver.execute_script of <selenium.webdriver.chrome.webdriver.WebDriver (session="98d395fc402b8502e1c90fccbc4591ae")>>("return typeof React !== 'undefined'")
E        +    where <bound method WebDriver.execute_script of <selenium.webdriver.chrome.webdriver.WebDriver (session="98d395fc402b8502e1c90fccbc4591ae")>> = <selenium.webdriver.chrome.webdriver.WebDriver (session="98d395fc402b8502e1c90fccbc4591ae")>.execute_script

tests/tests/test_react_bootstrap.py:3: AssertionError
- generated html file: file:///Users/bryanmwalwala/Desktop/CleanCity-main/reports/report.html -
=========================== short test summary info ============================
FAILED tests/tests/test_admin.py::TestAdmin::test_admin_login - selenium.comm...
FAILED tests/tests/test_admin.py::TestAdmin::test_update_request_status - sel...
FAILED tests/tests/test_admin.py::TestAdmin::test_stats_update - selenium.com...
FAILED tests/tests/test_admin.py::TestAdmin::test_update_button_state - selen...
FAILED tests/tests/test_awareness.py::TestAwarenessPage::test_accessibility_images
FAILED tests/tests/test_awareness.py::TestAwarenessPage::test_awareness_content_sections
FAILED tests/tests/test_awareness.py::TestAwarenessPage::test_responsive_layout
FAILED tests/tests/test_dashboard.py::TestDashboard::test_filter_by_status - ...
FAILED tests/tests/test_dashboard.py::TestDashboard::test_filter_by_location
FAILED tests/tests/test_dashboard.py::TestDashboard::test_filter_count_display
FAILED tests/tests/test_feedback.py::TestFeedback::test_submit_valid_feedback
FAILED tests/tests/test_feedback.py::TestFeedback::test_required_fields_validation[-Missed Pickup-expected_errors0]
FAILED tests/tests/test_feedback.py::TestFeedback::test_required_fields_validation[REQ001--expected_errors1]
FAILED tests/tests/test_feedback.py::TestFeedback::test_required_fields_validation[--expected_errors2]
FAILED tests/tests/test_feedback.py::TestFeedback::test_invalid_request_id - ...
FAILED tests/tests/test_home.py::TestHomePage::test_submit_valid_request - At...
FAILED tests/tests/test_home.py::TestHomePage::test_required_fields_validation[-Nairobi-General-expected_errors0]
FAILED tests/tests/test_home.py::TestHomePage::test_required_fields_validation[Test User--General-expected_errors1]
FAILED tests/tests/test_home.py::TestHomePage::test_required_fields_validation[Test User-Nairobi--expected_errors2]
FAILED tests/tests/test_home.py::TestHomePage::test_required_fields_validation[---expected_errors3]
FAILED tests/tests/test_home.py::TestHomePage::test_date_field_validation - A...
FAILED tests/tests/test_login.py::TestLogin::test_login_with_credentials[invalid@email.com-wrongpass-False-True]
FAILED tests/tests/test_react_bootstrap.py::test_react_loaded - AssertionErro...
================== 23 failed, 5 passed in 2026.14s (0:33:46) ===================
